openapi: 3.0.3
info:
  title: DevifyX Cron Job Runner API
  version: 1.0.0
  description: |
    Backend API to schedule, manage, and monitor custom cron jobs.
    Supports multi-tenancy, job dependencies, webhooks, and admin dashboard.

servers:
  - url: http://localhost:3000

tags:
  - name: Auth
    description: User registration and authentication
  - name: Jobs
    description: Job creation, management, and logs
  - name: Admin
    description: Admin dashboard and statistics

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [username, email, password, orgName]
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        orgName:
          type: string
        orgDescription:
          type: string
    RegisterResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        orgId:
          type: string
        role:
          type: string
    Organization:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
    Job:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        orgId:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [http, shell]
        schedule:
          type: string
        payload:
          type: object
        enabled:
          type: boolean
        retryLimit:
          type: integer
        webhookUrl:
          type: string
        dependsOn:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    JobCreateRequest:
      type: object
      required: [name, type, schedule, payload]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [http, shell]
        schedule:
          type: string
        payload:
          type: object
        enabled:
          type: boolean
        retryLimit:
          type: integer
        webhookUrl:
          type: string
        dependsOn:
          type: array
          items:
            type: string
    JobHistory:
      type: object
      properties:
        _id:
          type: string
        jobId:
          type: string
        executedAt:
          type: string
        status:
          type: string
          enum: [success, failure]
        output:
          type: object
        error:
          type: object
        retryCount:
          type: integer
        orgId:
          type: string

security:
  - bearerAuth: []

paths:
  /register:
    post:
      tags: [Auth]
      summary: Register a new user and organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad request

  /login:
    post:
      tags: [Auth]
      summary: Login and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized

  /jobs:
    get:
      tags: [Jobs]
      summary: List all jobs for user's organization
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
    post:
      tags: [Jobs]
      summary: Create a new job
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreateRequest'
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request

  /jobs/{jobId}:
    get:
      tags: [Jobs]
      summary: Get job by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Job detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '404':
          description: Not found
    put:
      tags: [Jobs]
      summary: Update a job by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreateRequest'
      responses:
        '200':
          description: Job updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request
        '404':
          description: Not found
    delete:
      tags: [Jobs]
      summary: Delete a job by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Job deleted
        '404':
          description: Not found

  /jobs/{jobId}/toggle:
    post:
      tags: [Jobs]
      summary: Toggle (enable/disable) a job
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Job toggled
        '404':
          description: Not found

  /jobs/{jobId}/history:
    get:
      tags: [Jobs]
      summary: Get execution history for a job
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Execution history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobHistory'

  /admin/health:
    get:
      tags: [Admin]
      summary: Get system/database health (admin only)
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  uptime:
                    type: number
                  dbConnected:
                    type: boolean
                  dbState:
                    type: integer
                  userCount:
                    type: integer
                  timestamp:
                    type: string

  /admin/stats/jobs:
    get:
      tags: [Admin]
      summary: Get job statistics (admin only)
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Job statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalJobs:
                    type: integer
                  jobsByOrg:
                    type: array
                    items:
                      type: object
                      properties:
                        orgId:
                          type: string
                        orgName:
                          type: string
                        count:
                          type: integer
                  enabledJobs:
                    type: integer
                  disabledJobs:
                    type: integer
                  jobsRunLast24h:
                    type: integer

  /admin/stats/users:
    get:
      tags: [Admin]
      summary: Get user statistics (admin only)
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: User statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                        email:
                          type: string
                        orgId:
                          type: string
                        jobCount:
                          type: integer

  /admin/jobs:
    get:
      tags: [Admin]
      summary: Get all jobs in the system (admin only)
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of all jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'

  /admin/users:
    get:
      tags: [Admin]
      summary: Get all users in the system (admin only)
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'